//-----------------------------------------------------------------------
// <copyright>
//      Created by Matt Weber <matt@badecho.com>
//      Copyright @ 2021 Bad Echo LLC. All rights reserved.
//
//		Bad Echo Technologies are licensed under a
//		Creative Commons Attribution-NonCommercial 4.0 International License.
//
//		See accompanying file LICENSE.md or a copy at:
//		http://creativecommons.org/licenses/by-nc/4.0/
// </copyright>
//-----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using BadEcho.Odin;
using BadEcho.Odin.Extensions;

namespace BadEcho.Omnified.Vision.Apocalypse
{
    /// <summary>
    /// Provides a base description for an event generated by the Apocalypse system in an Omnified game.
    /// </summary>
    /// <remarks>
    /// <para>
    /// An Apocalypse event describes an action undertaken by the Apocalypse system in response to damage being done either to the
    /// player, or to an enemy by the player. Different types of events exist for each of the various random effects the Apocalypse
    /// system can apply to entities receiving damage.
    /// </para>
    /// <para>
    /// All of the core Apocalypse events have a timestamp and are convertible into a recognizable effect message. These messages,
    /// displayed to the player to describe what the hell is happening in their game, as well show all the other auxiliary pieces of
    /// data specific to the event, are fleshed out in the particular event type that corresponds to the applied random effect.
    /// </para>
    /// </remarks>
    public abstract class ApocalypseEvent
    {
        private readonly Lazy<WeightedRandom<Func<Stream>>> _soundMap;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApocalypseEvent"/> class.
        /// </summary>
        protected ApocalypseEvent() =>
            _soundMap = new Lazy<WeightedRandom<Func<Stream>>>(InitializeSoundMap, LazyThreadSafetyMode.ExecutionAndPublication);

        /// <summary>
        /// Gets the date and time at which this Apocalypse event occurred.
        /// </summary>
        public DateTime Timestamp  
        { get; init; }

        /// <summary>
        /// Gets the raw data for the sound effect to play, if one is to be played, announcing the event's occurrence.
        /// </summary>
        public IEnumerable<byte>? SoundEffect
        {
            get
            {
                Func<Stream>? soundStreamAccessor = SoundMap.Next();

                if (soundStreamAccessor == null)
                    return null;

                using (var soundStream = soundStreamAccessor())
                {
                    return soundStream.ToArray();
                }
            }
        }

        private WeightedRandom<Func<Stream>> SoundMap
            => _soundMap.Value;

        /// <summary>
        /// Creates weighted random value mappings for sound effects that might play upon the event occurring.
        /// </summary>
        /// <returns>
        /// A <see cref="WeightedRandom{T}"/> instance mapping each sound effect for the event to the weighted probability that said
        /// sound effect might occur.
        /// </returns>
        /// <remarks>By default, an Apocalypse event has no sound effect played announcing its occurrence.</remarks>
        protected virtual WeightedRandom<Func<Stream>> InitializeSoundMap()
            => new();
    }
}
