//-----------------------------------------------------------------------
// <copyright>
//      Created by Matt Weber <matt@badecho.com>
//      Copyright @ 2021 Bad Echo LLC. All rights reserved.
//
//		Bad Echo Technologies are licensed under a
//		Creative Commons Attribution-NonCommercial 4.0 International License.
//
//		See accompanying file LICENSE.md or a copy at:
//		http://creativecommons.org/licenses/by-nc/4.0/
// </copyright>
//-----------------------------------------------------------------------s

using System.ComponentModel;
using BadEcho.Odin.Extensions;
using BadEcho.Omnified.Vision.Apocalypse.Properties;

namespace BadEcho.Omnified.Vision.Apocalypse
{
    /// <summary>
    /// Provides a description for an event generated by the Enemy Apocalypse subsystem in an Omnified game.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The Enemy Apocalypse subsystem is executed to handle incoming damage to an enemy from the player. It is
    /// not as punishing or exciting (typically) in comparison to what the Player Apocalypse does, but that is
    /// inline with the traditional Omnified philosophy (make game harder, not easier, except very rarely).
    /// </para>
    /// <para>
    /// Unlike the more complicated Player Apocalypse subsystem, all possible events that can occur with the Enemy
    /// Apocalypse system can be described with this single event type, as all the events revolve around (essentially)
    /// some type of bonus multiplier being applied to the damage.
    /// </para>
    /// </remarks>
    public sealed class EnemyApocalypseEvent : ApocalypseEvent
    {
        /// <summary>
        /// Gets the additional amount of damage (just the additional amount, not the bonus amount, not the base damage)
        /// inflicted upon the enemy as a result of this event.
        /// </summary>
        public int AdditionalDamage
        { get; init; }

        /// <summary>
        /// Gets the bonus multiplier that was applied to the incoming damage due to this event.
        /// </summary>
        public double BonusMultiplier
        { get; init; }

        /// <summary>
        /// Gets the type of bonus damage being applied by the Enemy Apocalypse event.
        /// </summary>
        public BonusDamageType BonusDamageType
        { get; init; }

        /// <inheritdoc/>
        public override string ToString()
            => DescribeBonus(BonusDamageType).CulturedFormat(BonusMultiplier, AdditionalDamage);

        private static string DescribeBonus(BonusDamageType bonusDamageType)
            => bonusDamageType switch
            {
                BonusDamageType.CriticalHit => EffectMessages.CriticalHit,
                BonusDamageType.Kamehameha => EffectMessages.Kamehameha,
                _ => throw new InvalidEnumArgumentException(nameof(bonusDamageType),
                                                            (int) bonusDamageType,
                                                            typeof(BonusDamageType))
            };
    }
}
