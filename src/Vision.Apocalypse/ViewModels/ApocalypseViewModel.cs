//-----------------------------------------------------------------------
// <copyright>
//      Created by Matt Weber <matt@badecho.com>
//      Copyright @ 2021 Bad Echo LLC. All rights reserved.
//
//		Bad Echo Technologies are licensed under a
//		Creative Commons Attribution-NonCommercial 4.0 International License.
//
//		See accompanying file LICENSE.md or a copy at:
//		http://creativecommons.org/licenses/by-nc/4.0/
// </copyright>
//-----------------------------------------------------------------------

using BadEcho.Fenestra.ViewModels;

namespace BadEcho.Omnified.Vision.Apocalypse.ViewModels
{
    /// <summary>
    /// Provides a view model that displays events generated by the Apocalypse system in an Omnified game.
    /// </summary>
    internal sealed class ApocalypseViewModel : PolymorphicCollectionViewModel<ApocalypseEvent, IApocalypseEventViewModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApocalypseViewModel"/> class.
        /// </summary>
        public ApocalypseViewModel()
            : base(new CollectionViewModelOptions {AsyncBatchBindings = false})
        {
            // Events from Player Apocalypse die rolls.
            RegisterDerivation<ExtraDamageEvent, PlayerApocalypseEventViewModel<ExtraDamageEvent>>();
            RegisterDerivation<TeleportitisEvent, PlayerApocalypseEventViewModel<TeleportitisEvent>>();
            RegisterDerivation<RiskOfMurderEvent, RiskOfMurderEventViewModel>();
            RegisterDerivation<OrgasmEvent, PlayerApocalypseEventViewModel<OrgasmEvent>>();

            // Fatalis events.
            RegisterDerivation<FatalisDeathEvent, ApocalypseEventViewModel<FatalisDeathEvent>>();
            RegisterDerivation<FatalisCuredEvent, ApocalypseEventViewModel<FatalisCuredEvent>>();

            // Events from Enemy Apocalypse die rolls.
            RegisterDerivation<EnemyApocalypseEvent, ApocalypseEventViewModel<EnemyApocalypseEvent>>();
        }

        /// <inheritdoc/>
        public override void OnChangeCompleted()
        {
            Children.OrderByDescending(vm => vm.Timestamp);
        }
    }
}
