<!--
    <copyright>
		Created by Matt Weber <matt@badecho.com>
		Copyright @ 2023 Bad Echo LLC. All rights reserved.

		Bad Echo Technologies are licensed under the
		GNU Affero General Public License v3.0.

		See accompanying file LICENSE.md or a copy at:
		https://www.gnu.org/licenses/agpl-3.0.html
    </copyright>
-->
<badEcho:View x:Class="BadEcho.Vision.Apocalypse.Views.ApocalypseView"
              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
              xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
              xmlns:vm="clr-namespace:BadEcho.Vision.Apocalypse.ViewModels"
              xmlns:v="clr-namespace:BadEcho.Vision.Apocalypse.Views"
              xmlns:t="clr-namespace:BadEcho.Vision.Extensibility.Themes;assembly=BadEcho.Vision.Extensibility"
              xmlns:badEcho="http://schemas.badecho.com/presentation/2022/02/xaml"                   
              mc:Ignorable="d"
              d:DesignWidth="650">
    <d:DesignProperties.DataContext>
        <vm:ApocalypseViewModel>
            <vm:ApocalypseViewModel.Children>
                <vm:RiskOfMurderEventViewModel EffectMessage="Something has happened that caused 53 billion damage, leaving the player with 300 health."
                                               Timestamp="09/02/2021 11:59"
                                               DieRoll="6"
                                               MurderRoll="2"
                                               />
                <vm:RiskOfMurderEventViewModel EffectMessage="Something else might have happened or something."
                                               Timestamp="09/02/2021 3:00"
                                               DieRoll="6"
                                               MurderRoll="4"
                                               />
                <vm:RiskOfMurderEventViewModel EffectMessage="Something maybe worse happened."
                                               Timestamp="09/02/2021 3:02"
                                               DieRoll="7"
                                               MurderRoll="5"
                                               />
            </vm:ApocalypseViewModel.Children>
        </vm:ApocalypseViewModel>
    </d:DesignProperties.DataContext>
    <badEcho:View.Resources>
        <!--Design-time child content templates, to aid in the visualization of various Apocalypse event views during development.
            While we have the infrastructure to automatically infer a view based on its view model, many of the Apocalypse view models
            can't easily be initialized in XAML (i.e. any with generics).-->
        <d:DataTemplate x:Key="DesignTimePlayerEventTemplate">
            <v:PlayerApocalypseEventView/>
        </d:DataTemplate>
        <d:DataTemplate x:Key="DesignTimeRiskEventTemplate">
            <v:RiskOfMurderEventView/>
        </d:DataTemplate>
        <!--Many Apocalypse event view models require view associations that are sensitive to the places both it and any immediately 
            implemented interface occupy within the object hierarchy; this warrants the use of a specialized template selector.-->
        <badEcho:ViewContextTemplateSelector x:Key="ContextSelector"/>
        <Style TargetType="ContentControl">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContentControl}">
                        <Border Margin="0,5,0,5">
                            <Border.Resources>
                                <badEcho:ArithmeticConverter x:Key="DirectionalConverter"
                                                             Operand="35"
                                                             Operation="Multiplication"
                                                             />
                                <Storyboard x:Key="RevealBounce">
                                    <DoubleAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.Opacity)" 
                                                     BeginTime="00:00:05"
                                                     From="1"
                                                     To="0"
                                                     />
                                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                     Duration="00:00:01"
                                                     From="{Binding DataContext.DirectionalCoefficient, 
                                                                    Converter={StaticResource DirectionalConverter},
                                                                    RelativeSource={RelativeSource AncestorType={x:Type badEcho:View}}}"
                                                     To="0">
                                        <DoubleAnimation.EasingFunction>
                                            <BounceEase Bounces="3"
                                                        EasingMode="EaseOut"
                                                        Bounciness="2"
                                                        />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </Border.Resources>
                            <Border.RenderTransform>
                                <TranslateTransform/>
                            </Border.RenderTransform>
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5" >
                                    <GradientStop Color="#FFA4A2A3"/>
                                    <GradientStop Color="#FFD2D2D2" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <!--The BeginStoryboard action must have a name, as giving it name will result in the runtime making the
                                        resulting storyboard controllable, a capability this view requires.-->
                                    <BeginStoryboard x:Name="RevealBounceAction" Storyboard="{StaticResource RevealBounce}"/>
                                </EventTrigger>
                            </Border.Triggers>
                            <badEcho:CancelableAnimationBehavior.State>
                                <badEcho:CancelableAnimationState Storyboard="{StaticResource RevealBounce}"
                                                                  Mediator="{Binding    DataContext.Mediator, 
                                                                                        RelativeSource={RelativeSource AncestorType={x:Type badEcho:View}}}"
                                                                  />
                            </badEcho:CancelableAnimationBehavior.State>
                            <Border>
                                <Border.Resources>
                                    <Storyboard x:Key="RevealShimmer">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Offset)"
                                                                       BeginTime="00:00:02">
                                            <EasingDoubleKeyFrame KeyTime="00:00:03" 
                                                                  Value="0.8"
                                                                  />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Offset)"
                                                                       BeginTime="00:00:02">
                                            <EasingDoubleKeyFrame KeyTime="00:00:03" Value="0.9"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Offset)"
                                                                       BeginTime="00:00:02">
                                            <EasingDoubleKeyFrame KeyTime="00:00:03" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.Opacity)"
                                                         BeginTime="00:00:05"
                                                         From="1"
                                                         To="0"
                                                         />
                                    </Storyboard>
                                </Border.Resources>
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1.7,1" StartPoint="-0.5,0">
                                        <GradientStop Color="#00FFFFFF"/>
                                        <GradientStop Color="#FFFFFFFF" Offset="0.1"/>
                                        <GradientStop Color="#00FFFFFF" Offset="0.2"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border.Triggers>
                                    <EventTrigger RoutedEvent="Loaded">
                                        <!--The BeginStoryboard action must have a name, as giving it name will result in the runtime making the
                                            resulting storyboard controllable, a capability this view requires.-->
                                        <BeginStoryboard x:Name="RevealShimmerAction" Storyboard="{StaticResource RevealShimmer}"/>
                                    </EventTrigger>
                                </Border.Triggers>
                                <badEcho:CancelableAnimationBehavior.State>
                                    <badEcho:CancelableAnimationState Storyboard="{StaticResource RevealShimmer}"
                                                                      Mediator="{Binding    DataContext.Mediator, 
                                                                                            RelativeSource={RelativeSource AncestorType={x:Type badEcho:View}}}"
                                                                      />
                                </badEcho:CancelableAnimationBehavior.State>
                                <ContentPresenter/>
                            </Border>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </badEcho:View.Resources>
    <Grid>
        <ItemsControl ItemsSource="{Binding Children}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Border BorderThickness="0,1,0,0">
                        <Border.BorderBrush>
                            <LinearGradientBrush StartPoint="0,0.5" 
                                                 EndPoint="1,0.5">
                                <GradientStop Color="Transparent" 
                                              Offset="0"
                                              />
                                <GradientStop Color="{DynamicResource {x:Static t:Colors.FadingOutlineColorKey}}" 
                                              Offset="0.1"
                                              />
                                <GradientStop Color="{DynamicResource {x:Static t:Colors.OutlineMidpointColorKey}}" 
                                              Offset="0.5"
                                />
                                <GradientStop Color="{DynamicResource {x:Static t:Colors.FadingOutlineColorKey}}" 
                                              Offset="0.9"
                                              />
                                <GradientStop Color="Transparent" 
                                              Offset="1"
                                              />
                            </LinearGradientBrush>
                        </Border.BorderBrush>
                        <ContentControl Content="{Binding}"
                                        ContentTemplateSelector="{StaticResource ContextSelector}"
                                        d:ContentTemplate="{StaticResource DesignTimePlayerEventTemplate}"
                                        />
                    </Border>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Grid.IsSharedSizeScope="True"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </Grid>
</badEcho:View>
